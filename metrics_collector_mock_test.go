package pgqueue

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/kasorse/pgqueue.MetricsCollector -o ./metrics_collector_mock_test.go -n MetricsCollectorMock

import (
	"sync"
	mm_atomic "sync/atomic"
	"time"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// MetricsCollectorMock implements MetricsCollector
type MetricsCollectorMock struct {
	t minimock.Tester

	funcDecBusyWorkers          func(processorName string, taskKind int16)
	inspectFuncDecBusyWorkers   func(processorName string, taskKind int16)
	afterDecBusyWorkersCounter  uint64
	beforeDecBusyWorkersCounter uint64
	DecBusyWorkersMock          mMetricsCollectorMockDecBusyWorkers

	funcIncBusyWorkers          func(processorName string, taskKind int16)
	inspectFuncIncBusyWorkers   func(processorName string, taskKind int16)
	afterIncBusyWorkersCounter  uint64
	beforeIncBusyWorkersCounter uint64
	IncBusyWorkersMock          mMetricsCollectorMockIncBusyWorkers

	funcMeasureTaskDuration          func(processorName string, taskKind int16, isSuccessful bool, duration time.Duration)
	inspectFuncMeasureTaskDuration   func(processorName string, taskKind int16, isSuccessful bool, duration time.Duration)
	afterMeasureTaskDurationCounter  uint64
	beforeMeasureTaskDurationCounter uint64
	MeasureTaskDurationMock          mMetricsCollectorMockMeasureTaskDuration
}

// NewMetricsCollectorMock returns a mock for MetricsCollector
func NewMetricsCollectorMock(t minimock.Tester) *MetricsCollectorMock {
	m := &MetricsCollectorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DecBusyWorkersMock = mMetricsCollectorMockDecBusyWorkers{mock: m}
	m.DecBusyWorkersMock.callArgs = []*MetricsCollectorMockDecBusyWorkersParams{}

	m.IncBusyWorkersMock = mMetricsCollectorMockIncBusyWorkers{mock: m}
	m.IncBusyWorkersMock.callArgs = []*MetricsCollectorMockIncBusyWorkersParams{}

	m.MeasureTaskDurationMock = mMetricsCollectorMockMeasureTaskDuration{mock: m}
	m.MeasureTaskDurationMock.callArgs = []*MetricsCollectorMockMeasureTaskDurationParams{}

	return m
}

type mMetricsCollectorMockDecBusyWorkers struct {
	mock               *MetricsCollectorMock
	defaultExpectation *MetricsCollectorMockDecBusyWorkersExpectation
	expectations       []*MetricsCollectorMockDecBusyWorkersExpectation

	callArgs []*MetricsCollectorMockDecBusyWorkersParams
	mutex    sync.RWMutex
}

// MetricsCollectorMockDecBusyWorkersExpectation specifies expectation struct of the MetricsCollector.DecBusyWorkers
type MetricsCollectorMockDecBusyWorkersExpectation struct {
	mock   *MetricsCollectorMock
	params *MetricsCollectorMockDecBusyWorkersParams

	Counter uint64
}

// MetricsCollectorMockDecBusyWorkersParams contains parameters of the MetricsCollector.DecBusyWorkers
type MetricsCollectorMockDecBusyWorkersParams struct {
	processorName string
	taskKind      int16
}

// Expect sets up expected params for MetricsCollector.DecBusyWorkers
func (mmDecBusyWorkers *mMetricsCollectorMockDecBusyWorkers) Expect(processorName string, taskKind int16) *mMetricsCollectorMockDecBusyWorkers {
	if mmDecBusyWorkers.mock.funcDecBusyWorkers != nil {
		mmDecBusyWorkers.mock.t.Fatalf("MetricsCollectorMock.DecBusyWorkers mock is already set by Set")
	}

	if mmDecBusyWorkers.defaultExpectation == nil {
		mmDecBusyWorkers.defaultExpectation = &MetricsCollectorMockDecBusyWorkersExpectation{}
	}

	mmDecBusyWorkers.defaultExpectation.params = &MetricsCollectorMockDecBusyWorkersParams{processorName, taskKind}
	for _, e := range mmDecBusyWorkers.expectations {
		if minimock.Equal(e.params, mmDecBusyWorkers.defaultExpectation.params) {
			mmDecBusyWorkers.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDecBusyWorkers.defaultExpectation.params)
		}
	}

	return mmDecBusyWorkers
}

// Inspect accepts an inspector function that has same arguments as the MetricsCollector.DecBusyWorkers
func (mmDecBusyWorkers *mMetricsCollectorMockDecBusyWorkers) Inspect(f func(processorName string, taskKind int16)) *mMetricsCollectorMockDecBusyWorkers {
	if mmDecBusyWorkers.mock.inspectFuncDecBusyWorkers != nil {
		mmDecBusyWorkers.mock.t.Fatalf("Inspect function is already set for MetricsCollectorMock.DecBusyWorkers")
	}

	mmDecBusyWorkers.mock.inspectFuncDecBusyWorkers = f

	return mmDecBusyWorkers
}

// Return sets up results that will be returned by MetricsCollector.DecBusyWorkers
func (mmDecBusyWorkers *mMetricsCollectorMockDecBusyWorkers) Return() *MetricsCollectorMock {
	if mmDecBusyWorkers.mock.funcDecBusyWorkers != nil {
		mmDecBusyWorkers.mock.t.Fatalf("MetricsCollectorMock.DecBusyWorkers mock is already set by Set")
	}

	if mmDecBusyWorkers.defaultExpectation == nil {
		mmDecBusyWorkers.defaultExpectation = &MetricsCollectorMockDecBusyWorkersExpectation{mock: mmDecBusyWorkers.mock}
	}

	return mmDecBusyWorkers.mock
}

// Set uses given function f to mock the MetricsCollector.DecBusyWorkers method
func (mmDecBusyWorkers *mMetricsCollectorMockDecBusyWorkers) Set(f func(processorName string, taskKind int16)) *MetricsCollectorMock {
	if mmDecBusyWorkers.defaultExpectation != nil {
		mmDecBusyWorkers.mock.t.Fatalf("Default expectation is already set for the MetricsCollector.DecBusyWorkers method")
	}

	if len(mmDecBusyWorkers.expectations) > 0 {
		mmDecBusyWorkers.mock.t.Fatalf("Some expectations are already set for the MetricsCollector.DecBusyWorkers method")
	}

	mmDecBusyWorkers.mock.funcDecBusyWorkers = f
	return mmDecBusyWorkers.mock
}

// DecBusyWorkers implements MetricsCollector
func (mmDecBusyWorkers *MetricsCollectorMock) DecBusyWorkers(processorName string, taskKind int16) {
	mm_atomic.AddUint64(&mmDecBusyWorkers.beforeDecBusyWorkersCounter, 1)
	defer mm_atomic.AddUint64(&mmDecBusyWorkers.afterDecBusyWorkersCounter, 1)

	if mmDecBusyWorkers.inspectFuncDecBusyWorkers != nil {
		mmDecBusyWorkers.inspectFuncDecBusyWorkers(processorName, taskKind)
	}

	mm_params := &MetricsCollectorMockDecBusyWorkersParams{processorName, taskKind}

	// Record call args
	mmDecBusyWorkers.DecBusyWorkersMock.mutex.Lock()
	mmDecBusyWorkers.DecBusyWorkersMock.callArgs = append(mmDecBusyWorkers.DecBusyWorkersMock.callArgs, mm_params)
	mmDecBusyWorkers.DecBusyWorkersMock.mutex.Unlock()

	for _, e := range mmDecBusyWorkers.DecBusyWorkersMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmDecBusyWorkers.DecBusyWorkersMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDecBusyWorkers.DecBusyWorkersMock.defaultExpectation.Counter, 1)
		mm_want := mmDecBusyWorkers.DecBusyWorkersMock.defaultExpectation.params
		mm_got := MetricsCollectorMockDecBusyWorkersParams{processorName, taskKind}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDecBusyWorkers.t.Errorf("MetricsCollectorMock.DecBusyWorkers got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmDecBusyWorkers.funcDecBusyWorkers != nil {
		mmDecBusyWorkers.funcDecBusyWorkers(processorName, taskKind)
		return
	}
	mmDecBusyWorkers.t.Fatalf("Unexpected call to MetricsCollectorMock.DecBusyWorkers. %v %v", processorName, taskKind)

}

// DecBusyWorkersAfterCounter returns a count of finished MetricsCollectorMock.DecBusyWorkers invocations
func (mmDecBusyWorkers *MetricsCollectorMock) DecBusyWorkersAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDecBusyWorkers.afterDecBusyWorkersCounter)
}

// DecBusyWorkersBeforeCounter returns a count of MetricsCollectorMock.DecBusyWorkers invocations
func (mmDecBusyWorkers *MetricsCollectorMock) DecBusyWorkersBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDecBusyWorkers.beforeDecBusyWorkersCounter)
}

// Calls returns a list of arguments used in each call to MetricsCollectorMock.DecBusyWorkers.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDecBusyWorkers *mMetricsCollectorMockDecBusyWorkers) Calls() []*MetricsCollectorMockDecBusyWorkersParams {
	mmDecBusyWorkers.mutex.RLock()

	argCopy := make([]*MetricsCollectorMockDecBusyWorkersParams, len(mmDecBusyWorkers.callArgs))
	copy(argCopy, mmDecBusyWorkers.callArgs)

	mmDecBusyWorkers.mutex.RUnlock()

	return argCopy
}

// MinimockDecBusyWorkersDone returns true if the count of the DecBusyWorkers invocations corresponds
// the number of defined expectations
func (m *MetricsCollectorMock) MinimockDecBusyWorkersDone() bool {
	for _, e := range m.DecBusyWorkersMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DecBusyWorkersMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDecBusyWorkersCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDecBusyWorkers != nil && mm_atomic.LoadUint64(&m.afterDecBusyWorkersCounter) < 1 {
		return false
	}
	return true
}

// MinimockDecBusyWorkersInspect logs each unmet expectation
func (m *MetricsCollectorMock) MinimockDecBusyWorkersInspect() {
	for _, e := range m.DecBusyWorkersMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MetricsCollectorMock.DecBusyWorkers with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DecBusyWorkersMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDecBusyWorkersCounter) < 1 {
		if m.DecBusyWorkersMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MetricsCollectorMock.DecBusyWorkers")
		} else {
			m.t.Errorf("Expected call to MetricsCollectorMock.DecBusyWorkers with params: %#v", *m.DecBusyWorkersMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDecBusyWorkers != nil && mm_atomic.LoadUint64(&m.afterDecBusyWorkersCounter) < 1 {
		m.t.Error("Expected call to MetricsCollectorMock.DecBusyWorkers")
	}
}

type mMetricsCollectorMockIncBusyWorkers struct {
	mock               *MetricsCollectorMock
	defaultExpectation *MetricsCollectorMockIncBusyWorkersExpectation
	expectations       []*MetricsCollectorMockIncBusyWorkersExpectation

	callArgs []*MetricsCollectorMockIncBusyWorkersParams
	mutex    sync.RWMutex
}

// MetricsCollectorMockIncBusyWorkersExpectation specifies expectation struct of the MetricsCollector.IncBusyWorkers
type MetricsCollectorMockIncBusyWorkersExpectation struct {
	mock   *MetricsCollectorMock
	params *MetricsCollectorMockIncBusyWorkersParams

	Counter uint64
}

// MetricsCollectorMockIncBusyWorkersParams contains parameters of the MetricsCollector.IncBusyWorkers
type MetricsCollectorMockIncBusyWorkersParams struct {
	processorName string
	taskKind      int16
}

// Expect sets up expected params for MetricsCollector.IncBusyWorkers
func (mmIncBusyWorkers *mMetricsCollectorMockIncBusyWorkers) Expect(processorName string, taskKind int16) *mMetricsCollectorMockIncBusyWorkers {
	if mmIncBusyWorkers.mock.funcIncBusyWorkers != nil {
		mmIncBusyWorkers.mock.t.Fatalf("MetricsCollectorMock.IncBusyWorkers mock is already set by Set")
	}

	if mmIncBusyWorkers.defaultExpectation == nil {
		mmIncBusyWorkers.defaultExpectation = &MetricsCollectorMockIncBusyWorkersExpectation{}
	}

	mmIncBusyWorkers.defaultExpectation.params = &MetricsCollectorMockIncBusyWorkersParams{processorName, taskKind}
	for _, e := range mmIncBusyWorkers.expectations {
		if minimock.Equal(e.params, mmIncBusyWorkers.defaultExpectation.params) {
			mmIncBusyWorkers.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmIncBusyWorkers.defaultExpectation.params)
		}
	}

	return mmIncBusyWorkers
}

// Inspect accepts an inspector function that has same arguments as the MetricsCollector.IncBusyWorkers
func (mmIncBusyWorkers *mMetricsCollectorMockIncBusyWorkers) Inspect(f func(processorName string, taskKind int16)) *mMetricsCollectorMockIncBusyWorkers {
	if mmIncBusyWorkers.mock.inspectFuncIncBusyWorkers != nil {
		mmIncBusyWorkers.mock.t.Fatalf("Inspect function is already set for MetricsCollectorMock.IncBusyWorkers")
	}

	mmIncBusyWorkers.mock.inspectFuncIncBusyWorkers = f

	return mmIncBusyWorkers
}

// Return sets up results that will be returned by MetricsCollector.IncBusyWorkers
func (mmIncBusyWorkers *mMetricsCollectorMockIncBusyWorkers) Return() *MetricsCollectorMock {
	if mmIncBusyWorkers.mock.funcIncBusyWorkers != nil {
		mmIncBusyWorkers.mock.t.Fatalf("MetricsCollectorMock.IncBusyWorkers mock is already set by Set")
	}

	if mmIncBusyWorkers.defaultExpectation == nil {
		mmIncBusyWorkers.defaultExpectation = &MetricsCollectorMockIncBusyWorkersExpectation{mock: mmIncBusyWorkers.mock}
	}

	return mmIncBusyWorkers.mock
}

// Set uses given function f to mock the MetricsCollector.IncBusyWorkers method
func (mmIncBusyWorkers *mMetricsCollectorMockIncBusyWorkers) Set(f func(processorName string, taskKind int16)) *MetricsCollectorMock {
	if mmIncBusyWorkers.defaultExpectation != nil {
		mmIncBusyWorkers.mock.t.Fatalf("Default expectation is already set for the MetricsCollector.IncBusyWorkers method")
	}

	if len(mmIncBusyWorkers.expectations) > 0 {
		mmIncBusyWorkers.mock.t.Fatalf("Some expectations are already set for the MetricsCollector.IncBusyWorkers method")
	}

	mmIncBusyWorkers.mock.funcIncBusyWorkers = f
	return mmIncBusyWorkers.mock
}

// IncBusyWorkers implements MetricsCollector
func (mmIncBusyWorkers *MetricsCollectorMock) IncBusyWorkers(processorName string, taskKind int16) {
	mm_atomic.AddUint64(&mmIncBusyWorkers.beforeIncBusyWorkersCounter, 1)
	defer mm_atomic.AddUint64(&mmIncBusyWorkers.afterIncBusyWorkersCounter, 1)

	if mmIncBusyWorkers.inspectFuncIncBusyWorkers != nil {
		mmIncBusyWorkers.inspectFuncIncBusyWorkers(processorName, taskKind)
	}

	mm_params := &MetricsCollectorMockIncBusyWorkersParams{processorName, taskKind}

	// Record call args
	mmIncBusyWorkers.IncBusyWorkersMock.mutex.Lock()
	mmIncBusyWorkers.IncBusyWorkersMock.callArgs = append(mmIncBusyWorkers.IncBusyWorkersMock.callArgs, mm_params)
	mmIncBusyWorkers.IncBusyWorkersMock.mutex.Unlock()

	for _, e := range mmIncBusyWorkers.IncBusyWorkersMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmIncBusyWorkers.IncBusyWorkersMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmIncBusyWorkers.IncBusyWorkersMock.defaultExpectation.Counter, 1)
		mm_want := mmIncBusyWorkers.IncBusyWorkersMock.defaultExpectation.params
		mm_got := MetricsCollectorMockIncBusyWorkersParams{processorName, taskKind}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmIncBusyWorkers.t.Errorf("MetricsCollectorMock.IncBusyWorkers got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmIncBusyWorkers.funcIncBusyWorkers != nil {
		mmIncBusyWorkers.funcIncBusyWorkers(processorName, taskKind)
		return
	}
	mmIncBusyWorkers.t.Fatalf("Unexpected call to MetricsCollectorMock.IncBusyWorkers. %v %v", processorName, taskKind)

}

// IncBusyWorkersAfterCounter returns a count of finished MetricsCollectorMock.IncBusyWorkers invocations
func (mmIncBusyWorkers *MetricsCollectorMock) IncBusyWorkersAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIncBusyWorkers.afterIncBusyWorkersCounter)
}

// IncBusyWorkersBeforeCounter returns a count of MetricsCollectorMock.IncBusyWorkers invocations
func (mmIncBusyWorkers *MetricsCollectorMock) IncBusyWorkersBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIncBusyWorkers.beforeIncBusyWorkersCounter)
}

// Calls returns a list of arguments used in each call to MetricsCollectorMock.IncBusyWorkers.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmIncBusyWorkers *mMetricsCollectorMockIncBusyWorkers) Calls() []*MetricsCollectorMockIncBusyWorkersParams {
	mmIncBusyWorkers.mutex.RLock()

	argCopy := make([]*MetricsCollectorMockIncBusyWorkersParams, len(mmIncBusyWorkers.callArgs))
	copy(argCopy, mmIncBusyWorkers.callArgs)

	mmIncBusyWorkers.mutex.RUnlock()

	return argCopy
}

// MinimockIncBusyWorkersDone returns true if the count of the IncBusyWorkers invocations corresponds
// the number of defined expectations
func (m *MetricsCollectorMock) MinimockIncBusyWorkersDone() bool {
	for _, e := range m.IncBusyWorkersMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IncBusyWorkersMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIncBusyWorkersCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIncBusyWorkers != nil && mm_atomic.LoadUint64(&m.afterIncBusyWorkersCounter) < 1 {
		return false
	}
	return true
}

// MinimockIncBusyWorkersInspect logs each unmet expectation
func (m *MetricsCollectorMock) MinimockIncBusyWorkersInspect() {
	for _, e := range m.IncBusyWorkersMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MetricsCollectorMock.IncBusyWorkers with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IncBusyWorkersMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIncBusyWorkersCounter) < 1 {
		if m.IncBusyWorkersMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MetricsCollectorMock.IncBusyWorkers")
		} else {
			m.t.Errorf("Expected call to MetricsCollectorMock.IncBusyWorkers with params: %#v", *m.IncBusyWorkersMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIncBusyWorkers != nil && mm_atomic.LoadUint64(&m.afterIncBusyWorkersCounter) < 1 {
		m.t.Error("Expected call to MetricsCollectorMock.IncBusyWorkers")
	}
}

type mMetricsCollectorMockMeasureTaskDuration struct {
	mock               *MetricsCollectorMock
	defaultExpectation *MetricsCollectorMockMeasureTaskDurationExpectation
	expectations       []*MetricsCollectorMockMeasureTaskDurationExpectation

	callArgs []*MetricsCollectorMockMeasureTaskDurationParams
	mutex    sync.RWMutex
}

// MetricsCollectorMockMeasureTaskDurationExpectation specifies expectation struct of the MetricsCollector.MeasureTaskDuration
type MetricsCollectorMockMeasureTaskDurationExpectation struct {
	mock   *MetricsCollectorMock
	params *MetricsCollectorMockMeasureTaskDurationParams

	Counter uint64
}

// MetricsCollectorMockMeasureTaskDurationParams contains parameters of the MetricsCollector.MeasureTaskDuration
type MetricsCollectorMockMeasureTaskDurationParams struct {
	processorName string
	taskKind      int16
	isSuccessful  bool
	duration      time.Duration
}

// Expect sets up expected params for MetricsCollector.MeasureTaskDuration
func (mmMeasureTaskDuration *mMetricsCollectorMockMeasureTaskDuration) Expect(processorName string, taskKind int16, isSuccessful bool, duration time.Duration) *mMetricsCollectorMockMeasureTaskDuration {
	if mmMeasureTaskDuration.mock.funcMeasureTaskDuration != nil {
		mmMeasureTaskDuration.mock.t.Fatalf("MetricsCollectorMock.MeasureTaskDuration mock is already set by Set")
	}

	if mmMeasureTaskDuration.defaultExpectation == nil {
		mmMeasureTaskDuration.defaultExpectation = &MetricsCollectorMockMeasureTaskDurationExpectation{}
	}

	mmMeasureTaskDuration.defaultExpectation.params = &MetricsCollectorMockMeasureTaskDurationParams{processorName, taskKind, isSuccessful, duration}
	for _, e := range mmMeasureTaskDuration.expectations {
		if minimock.Equal(e.params, mmMeasureTaskDuration.defaultExpectation.params) {
			mmMeasureTaskDuration.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmMeasureTaskDuration.defaultExpectation.params)
		}
	}

	return mmMeasureTaskDuration
}

// Inspect accepts an inspector function that has same arguments as the MetricsCollector.MeasureTaskDuration
func (mmMeasureTaskDuration *mMetricsCollectorMockMeasureTaskDuration) Inspect(f func(processorName string, taskKind int16, isSuccessful bool, duration time.Duration)) *mMetricsCollectorMockMeasureTaskDuration {
	if mmMeasureTaskDuration.mock.inspectFuncMeasureTaskDuration != nil {
		mmMeasureTaskDuration.mock.t.Fatalf("Inspect function is already set for MetricsCollectorMock.MeasureTaskDuration")
	}

	mmMeasureTaskDuration.mock.inspectFuncMeasureTaskDuration = f

	return mmMeasureTaskDuration
}

// Return sets up results that will be returned by MetricsCollector.MeasureTaskDuration
func (mmMeasureTaskDuration *mMetricsCollectorMockMeasureTaskDuration) Return() *MetricsCollectorMock {
	if mmMeasureTaskDuration.mock.funcMeasureTaskDuration != nil {
		mmMeasureTaskDuration.mock.t.Fatalf("MetricsCollectorMock.MeasureTaskDuration mock is already set by Set")
	}

	if mmMeasureTaskDuration.defaultExpectation == nil {
		mmMeasureTaskDuration.defaultExpectation = &MetricsCollectorMockMeasureTaskDurationExpectation{mock: mmMeasureTaskDuration.mock}
	}

	return mmMeasureTaskDuration.mock
}

// Set uses given function f to mock the MetricsCollector.MeasureTaskDuration method
func (mmMeasureTaskDuration *mMetricsCollectorMockMeasureTaskDuration) Set(f func(processorName string, taskKind int16, isSuccessful bool, duration time.Duration)) *MetricsCollectorMock {
	if mmMeasureTaskDuration.defaultExpectation != nil {
		mmMeasureTaskDuration.mock.t.Fatalf("Default expectation is already set for the MetricsCollector.MeasureTaskDuration method")
	}

	if len(mmMeasureTaskDuration.expectations) > 0 {
		mmMeasureTaskDuration.mock.t.Fatalf("Some expectations are already set for the MetricsCollector.MeasureTaskDuration method")
	}

	mmMeasureTaskDuration.mock.funcMeasureTaskDuration = f
	return mmMeasureTaskDuration.mock
}

// MeasureTaskDuration implements MetricsCollector
func (mmMeasureTaskDuration *MetricsCollectorMock) MeasureTaskDuration(processorName string, taskKind int16, isSuccessful bool, duration time.Duration) {
	mm_atomic.AddUint64(&mmMeasureTaskDuration.beforeMeasureTaskDurationCounter, 1)
	defer mm_atomic.AddUint64(&mmMeasureTaskDuration.afterMeasureTaskDurationCounter, 1)

	if mmMeasureTaskDuration.inspectFuncMeasureTaskDuration != nil {
		mmMeasureTaskDuration.inspectFuncMeasureTaskDuration(processorName, taskKind, isSuccessful, duration)
	}

	mm_params := &MetricsCollectorMockMeasureTaskDurationParams{processorName, taskKind, isSuccessful, duration}

	// Record call args
	mmMeasureTaskDuration.MeasureTaskDurationMock.mutex.Lock()
	mmMeasureTaskDuration.MeasureTaskDurationMock.callArgs = append(mmMeasureTaskDuration.MeasureTaskDurationMock.callArgs, mm_params)
	mmMeasureTaskDuration.MeasureTaskDurationMock.mutex.Unlock()

	for _, e := range mmMeasureTaskDuration.MeasureTaskDurationMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmMeasureTaskDuration.MeasureTaskDurationMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmMeasureTaskDuration.MeasureTaskDurationMock.defaultExpectation.Counter, 1)
		mm_want := mmMeasureTaskDuration.MeasureTaskDurationMock.defaultExpectation.params
		mm_got := MetricsCollectorMockMeasureTaskDurationParams{processorName, taskKind, isSuccessful, duration}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmMeasureTaskDuration.t.Errorf("MetricsCollectorMock.MeasureTaskDuration got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmMeasureTaskDuration.funcMeasureTaskDuration != nil {
		mmMeasureTaskDuration.funcMeasureTaskDuration(processorName, taskKind, isSuccessful, duration)
		return
	}
	mmMeasureTaskDuration.t.Fatalf("Unexpected call to MetricsCollectorMock.MeasureTaskDuration. %v %v %v %v", processorName, taskKind, isSuccessful, duration)

}

// MeasureTaskDurationAfterCounter returns a count of finished MetricsCollectorMock.MeasureTaskDuration invocations
func (mmMeasureTaskDuration *MetricsCollectorMock) MeasureTaskDurationAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmMeasureTaskDuration.afterMeasureTaskDurationCounter)
}

// MeasureTaskDurationBeforeCounter returns a count of MetricsCollectorMock.MeasureTaskDuration invocations
func (mmMeasureTaskDuration *MetricsCollectorMock) MeasureTaskDurationBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmMeasureTaskDuration.beforeMeasureTaskDurationCounter)
}

// Calls returns a list of arguments used in each call to MetricsCollectorMock.MeasureTaskDuration.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmMeasureTaskDuration *mMetricsCollectorMockMeasureTaskDuration) Calls() []*MetricsCollectorMockMeasureTaskDurationParams {
	mmMeasureTaskDuration.mutex.RLock()

	argCopy := make([]*MetricsCollectorMockMeasureTaskDurationParams, len(mmMeasureTaskDuration.callArgs))
	copy(argCopy, mmMeasureTaskDuration.callArgs)

	mmMeasureTaskDuration.mutex.RUnlock()

	return argCopy
}

// MinimockMeasureTaskDurationDone returns true if the count of the MeasureTaskDuration invocations corresponds
// the number of defined expectations
func (m *MetricsCollectorMock) MinimockMeasureTaskDurationDone() bool {
	for _, e := range m.MeasureTaskDurationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.MeasureTaskDurationMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterMeasureTaskDurationCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcMeasureTaskDuration != nil && mm_atomic.LoadUint64(&m.afterMeasureTaskDurationCounter) < 1 {
		return false
	}
	return true
}

// MinimockMeasureTaskDurationInspect logs each unmet expectation
func (m *MetricsCollectorMock) MinimockMeasureTaskDurationInspect() {
	for _, e := range m.MeasureTaskDurationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MetricsCollectorMock.MeasureTaskDuration with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.MeasureTaskDurationMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterMeasureTaskDurationCounter) < 1 {
		if m.MeasureTaskDurationMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MetricsCollectorMock.MeasureTaskDuration")
		} else {
			m.t.Errorf("Expected call to MetricsCollectorMock.MeasureTaskDuration with params: %#v", *m.MeasureTaskDurationMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcMeasureTaskDuration != nil && mm_atomic.LoadUint64(&m.afterMeasureTaskDurationCounter) < 1 {
		m.t.Error("Expected call to MetricsCollectorMock.MeasureTaskDuration")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MetricsCollectorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockDecBusyWorkersInspect()

		m.MinimockIncBusyWorkersInspect()

		m.MinimockMeasureTaskDurationInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MetricsCollectorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MetricsCollectorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDecBusyWorkersDone() &&
		m.MinimockIncBusyWorkersDone() &&
		m.MinimockMeasureTaskDurationDone()
}
