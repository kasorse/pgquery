package pgqueue

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/kasorse/pgqueue.TaskHandler -o ./task_handler_mock_test.go -n TaskHandlerMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// TaskHandlerMock implements TaskHandler
type TaskHandlerMock struct {
	t minimock.Tester

	funcHandleTask          func(ctx context.Context, task *Task) (err error)
	inspectFuncHandleTask   func(ctx context.Context, task *Task)
	afterHandleTaskCounter  uint64
	beforeHandleTaskCounter uint64
	HandleTaskMock          mTaskHandlerMockHandleTask
}

// NewTaskHandlerMock returns a mock for TaskHandler
func NewTaskHandlerMock(t minimock.Tester) *TaskHandlerMock {
	m := &TaskHandlerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.HandleTaskMock = mTaskHandlerMockHandleTask{mock: m}
	m.HandleTaskMock.callArgs = []*TaskHandlerMockHandleTaskParams{}

	return m
}

type mTaskHandlerMockHandleTask struct {
	mock               *TaskHandlerMock
	defaultExpectation *TaskHandlerMockHandleTaskExpectation
	expectations       []*TaskHandlerMockHandleTaskExpectation

	callArgs []*TaskHandlerMockHandleTaskParams
	mutex    sync.RWMutex
}

// TaskHandlerMockHandleTaskExpectation specifies expectation struct of the TaskHandler.HandleTask
type TaskHandlerMockHandleTaskExpectation struct {
	mock    *TaskHandlerMock
	params  *TaskHandlerMockHandleTaskParams
	results *TaskHandlerMockHandleTaskResults
	Counter uint64
}

// TaskHandlerMockHandleTaskParams contains parameters of the TaskHandler.HandleTask
type TaskHandlerMockHandleTaskParams struct {
	ctx  context.Context
	task *Task
}

// TaskHandlerMockHandleTaskResults contains results of the TaskHandler.HandleTask
type TaskHandlerMockHandleTaskResults struct {
	err error
}

// Expect sets up expected params for TaskHandler.HandleTask
func (mmHandleTask *mTaskHandlerMockHandleTask) Expect(ctx context.Context, task *Task) *mTaskHandlerMockHandleTask {
	if mmHandleTask.mock.funcHandleTask != nil {
		mmHandleTask.mock.t.Fatalf("TaskHandlerMock.HandleTask mock is already set by Set")
	}

	if mmHandleTask.defaultExpectation == nil {
		mmHandleTask.defaultExpectation = &TaskHandlerMockHandleTaskExpectation{}
	}

	mmHandleTask.defaultExpectation.params = &TaskHandlerMockHandleTaskParams{ctx, task}
	for _, e := range mmHandleTask.expectations {
		if minimock.Equal(e.params, mmHandleTask.defaultExpectation.params) {
			mmHandleTask.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmHandleTask.defaultExpectation.params)
		}
	}

	return mmHandleTask
}

// Inspect accepts an inspector function that has same arguments as the TaskHandler.HandleTask
func (mmHandleTask *mTaskHandlerMockHandleTask) Inspect(f func(ctx context.Context, task *Task)) *mTaskHandlerMockHandleTask {
	if mmHandleTask.mock.inspectFuncHandleTask != nil {
		mmHandleTask.mock.t.Fatalf("Inspect function is already set for TaskHandlerMock.HandleTask")
	}

	mmHandleTask.mock.inspectFuncHandleTask = f

	return mmHandleTask
}

// Return sets up results that will be returned by TaskHandler.HandleTask
func (mmHandleTask *mTaskHandlerMockHandleTask) Return(err error) *TaskHandlerMock {
	if mmHandleTask.mock.funcHandleTask != nil {
		mmHandleTask.mock.t.Fatalf("TaskHandlerMock.HandleTask mock is already set by Set")
	}

	if mmHandleTask.defaultExpectation == nil {
		mmHandleTask.defaultExpectation = &TaskHandlerMockHandleTaskExpectation{mock: mmHandleTask.mock}
	}
	mmHandleTask.defaultExpectation.results = &TaskHandlerMockHandleTaskResults{err}
	return mmHandleTask.mock
}

// Set uses given function f to mock the TaskHandler.HandleTask method
func (mmHandleTask *mTaskHandlerMockHandleTask) Set(f func(ctx context.Context, task *Task) (err error)) *TaskHandlerMock {
	if mmHandleTask.defaultExpectation != nil {
		mmHandleTask.mock.t.Fatalf("Default expectation is already set for the TaskHandler.HandleTask method")
	}

	if len(mmHandleTask.expectations) > 0 {
		mmHandleTask.mock.t.Fatalf("Some expectations are already set for the TaskHandler.HandleTask method")
	}

	mmHandleTask.mock.funcHandleTask = f
	return mmHandleTask.mock
}

// When sets expectation for the TaskHandler.HandleTask which will trigger the result defined by the following
// Then helper
func (mmHandleTask *mTaskHandlerMockHandleTask) When(ctx context.Context, task *Task) *TaskHandlerMockHandleTaskExpectation {
	if mmHandleTask.mock.funcHandleTask != nil {
		mmHandleTask.mock.t.Fatalf("TaskHandlerMock.HandleTask mock is already set by Set")
	}

	expectation := &TaskHandlerMockHandleTaskExpectation{
		mock:   mmHandleTask.mock,
		params: &TaskHandlerMockHandleTaskParams{ctx, task},
	}
	mmHandleTask.expectations = append(mmHandleTask.expectations, expectation)
	return expectation
}

// Then sets up TaskHandler.HandleTask return parameters for the expectation previously defined by the When method
func (e *TaskHandlerMockHandleTaskExpectation) Then(err error) *TaskHandlerMock {
	e.results = &TaskHandlerMockHandleTaskResults{err}
	return e.mock
}

// HandleTask implements TaskHandler
func (mmHandleTask *TaskHandlerMock) HandleTask(ctx context.Context, task *Task) (err error) {
	mm_atomic.AddUint64(&mmHandleTask.beforeHandleTaskCounter, 1)
	defer mm_atomic.AddUint64(&mmHandleTask.afterHandleTaskCounter, 1)

	if mmHandleTask.inspectFuncHandleTask != nil {
		mmHandleTask.inspectFuncHandleTask(ctx, task)
	}

	mm_params := &TaskHandlerMockHandleTaskParams{ctx, task}

	// Record call args
	mmHandleTask.HandleTaskMock.mutex.Lock()
	mmHandleTask.HandleTaskMock.callArgs = append(mmHandleTask.HandleTaskMock.callArgs, mm_params)
	mmHandleTask.HandleTaskMock.mutex.Unlock()

	for _, e := range mmHandleTask.HandleTaskMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmHandleTask.HandleTaskMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmHandleTask.HandleTaskMock.defaultExpectation.Counter, 1)
		mm_want := mmHandleTask.HandleTaskMock.defaultExpectation.params
		mm_got := TaskHandlerMockHandleTaskParams{ctx, task}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmHandleTask.t.Errorf("TaskHandlerMock.HandleTask got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmHandleTask.HandleTaskMock.defaultExpectation.results
		if mm_results == nil {
			mmHandleTask.t.Fatal("No results are set for the TaskHandlerMock.HandleTask")
		}
		return (*mm_results).err
	}
	if mmHandleTask.funcHandleTask != nil {
		return mmHandleTask.funcHandleTask(ctx, task)
	}
	mmHandleTask.t.Fatalf("Unexpected call to TaskHandlerMock.HandleTask. %v %v", ctx, task)
	return
}

// HandleTaskAfterCounter returns a count of finished TaskHandlerMock.HandleTask invocations
func (mmHandleTask *TaskHandlerMock) HandleTaskAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHandleTask.afterHandleTaskCounter)
}

// HandleTaskBeforeCounter returns a count of TaskHandlerMock.HandleTask invocations
func (mmHandleTask *TaskHandlerMock) HandleTaskBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHandleTask.beforeHandleTaskCounter)
}

// Calls returns a list of arguments used in each call to TaskHandlerMock.HandleTask.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmHandleTask *mTaskHandlerMockHandleTask) Calls() []*TaskHandlerMockHandleTaskParams {
	mmHandleTask.mutex.RLock()

	argCopy := make([]*TaskHandlerMockHandleTaskParams, len(mmHandleTask.callArgs))
	copy(argCopy, mmHandleTask.callArgs)

	mmHandleTask.mutex.RUnlock()

	return argCopy
}

// MinimockHandleTaskDone returns true if the count of the HandleTask invocations corresponds
// the number of defined expectations
func (m *TaskHandlerMock) MinimockHandleTaskDone() bool {
	for _, e := range m.HandleTaskMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.HandleTaskMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterHandleTaskCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcHandleTask != nil && mm_atomic.LoadUint64(&m.afterHandleTaskCounter) < 1 {
		return false
	}
	return true
}

// MinimockHandleTaskInspect logs each unmet expectation
func (m *TaskHandlerMock) MinimockHandleTaskInspect() {
	for _, e := range m.HandleTaskMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TaskHandlerMock.HandleTask with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.HandleTaskMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterHandleTaskCounter) < 1 {
		if m.HandleTaskMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TaskHandlerMock.HandleTask")
		} else {
			m.t.Errorf("Expected call to TaskHandlerMock.HandleTask with params: %#v", *m.HandleTaskMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcHandleTask != nil && mm_atomic.LoadUint64(&m.afterHandleTaskCounter) < 1 {
		m.t.Error("Expected call to TaskHandlerMock.HandleTask")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TaskHandlerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockHandleTaskInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TaskHandlerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TaskHandlerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockHandleTaskDone()
}
